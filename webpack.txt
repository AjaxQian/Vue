webpack  前端自动化构建工具,可以完美实现资源的合并,打包压缩,混淆等诸多功能webpack 是前端的一个项目构建工具,它是基于Node.js开发出来的一个前端工具Gulp 是基于task任务的;Webpack是基于整个项目进行构建的;现在是2018年12月27日  目前最新的是版本4  用最新的版本npm i webpack -g   安装 webpack 全局包先新建一个文件夹WEBPACK-SYUDY目录下有两个文件夹>dist :发布完的文件可以放在dist里面去,把dist文件直接拷给用户;发布完成 后产品的内容> src:这个里面放的是文件的源代码然后以下是src里面的文件及文件夹>css>images>js>index.html   //这个是首页>main.js   //这个main.js是我们项目的JS入口文件首页编辑好 了后nmp init -y  先初始化一个仓库  然后安装 jquerynpm i jquery - S不用在首页直接引用任何包和任何CSS文件把所有的东西在main.js里面写main.js//////导入jquery包inport  *** from  *** 是ES6中导入模块的方式import $ from 'jquery'好比:const $ = require('jquery')剩下的可以写JQ代码直接在首页Index.js 中导入 main.js模块<scritp src="main.js"></script>由于ES6的代码,太高级了,浏览器解析不了,所以,这一行执行会报错import $ from 'jquery'通过WEBPACK这么一个前端构建工具,把main.js做了一下处理,生成了一个bundle.js文件,然后通过script导入首页打开终端 在WEBPACK-SYUDY 根目录下执行代码如下webpack  .\src\main.js   .\dist\bundle.js将本地的main.js 打包 到dist中为bundle.js文件经过上面的代码1  webpack 能够处理JS文件的互相依赖的关系2  webpack能够处理JS兼容的问题,把高级的.浏览器不识别的语法,转为低级的,浏览器能正常识别的语法刚才运行的命令格式 :webpack 要打包的文件的路径  打包好的输出文件的路径因为打包的文件已经打包好了, 如果继续在main.js中运行的话,页面效果没有变化 ,这样的话就需要重新打包  webpack  .\src\main.js   .\dist\bundle.js如果想快速执行打包  --------------------1.在根目录webpack-study中新建一个webpack.config.js的配置文件打开配置文件://这个配置文件,起始就是一个JS文件,通过Node中的模块操作,向外暴露了一个配置对象 //安装一个path模块,因为webpack是基于Node.js的  所以 里面可以直接使用Node.js语句const path = require('path')module.exports ={            entry:  path.join(_dirname,"./src/main.js"),//入口,表示,要使用weebpack打包哪个文件            output{  //输出文件相关的配置                          path.join(_dirname,"./dist") //指定打包好的文件,输出到哪个目录中去                           filename:"bundle.js"   //这是指定输出的文件的名称    }   }然后直接在终端 执行  webpack   在首页中就可以直接执行了当我们在控制台,直接输入webpack命令执行的时候,webpack做了以下几步:1.首先webpack发现,我们并没有命令的形式,给它指定入口和出口2  webpack　　就会去项目的要目录中，查找一个叫做ｗｅｂｐａｃｋ．ｃｏｎｆｉｇ．ｊｓ的配置文件３　当找到配置文件后，webpack会去解析执行这个配置文件,当解析执行完配置文件后,就得到了配置文件中,导出配置对象4  当webpack拿到配置对象后,就拿到了配置对象中,指定的入口和出口,然后进行打包构建.然而上面那个方法在我们程序员来看还是太麻烦了所以有了  webpack-dev-server这个工具,来实现自动打包编译功能1  运行npm i webpack -dev-server -D 把这个工具安装到项目的本地开发依赖2  安装完毕后,这个工具的用法,和webpack 命令的用法,完全一样3.由于,我们是在项目中,本地安装了webpack-dev-server,所以,无法把它当作脚本命令,在powersh终端中直接运行;(只有那些安装到全局 -g d的工具,才能在终端中正常执行)  